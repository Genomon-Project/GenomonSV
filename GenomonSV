#! /usr/bin/env python

from genomonsv.run import *
import argparse

####################
# top level parser
parser = argparse.ArgumentParser(prog = "GenomonSV", formatter_class=argparse.ArgumentDefaultsHelpFormatter)

parser.add_argument("--version", action = "version", version = "GenomonSV-0.4.0beta")

parser.add_argument("--debug", default = False, action = 'store_true', help = "keep intermediate files")

subparsers = parser.add_subparsers()

####################


####################
# GenomonSV parse
parse_parser = subparsers.add_parser("parse", 
                                     help = "Parse and cluster supporting read pairs for candidate structural variations",
                                     formatter_class=argparse.ArgumentDefaultsHelpFormatter)
 
parse_parser.add_argument("bam_file", metavar = "input.bam", type = str,
                          help = "path to input bam file")

parse_parser.add_argument("output_prefix", metavar = "output_prefix", type = str,
                          help = "prefix of the pathes of output files")


parse_junction_group = parse_parser.add_argument_group("parse_junction_condition",
                                                       "parameters used for parsing breakpoint containing read pairs from bam files")

parse_junction_group.add_argument("--junction_abnormal_insert_size", type = int, default = 1000,
                                  help = "size of abnormal insert size. used for checking the consistency of paired read of breakpoint containing reads (default: %(default)s)")

parse_junction_group.add_argument("--junction_min_major_clipping_size", type = int, default = 15,
                                  help = "minimum number of clipped bases for junction read (default: %(default)s)")

parse_junction_group.add_argument("--junction_max_minor_clipping_size", type = int, default = 15,
                                  help = "if the clipped bases numbers of both sides are greater than this value, then the read is filtered out (default: %(default)s)")


cluster_junction_group = parse_parser.add_argument_group("cluster_junction_condition",
                                                         "parameters used for clustering breakpoint containing read pairs")

cluster_junction_group.add_argument("--junction_check_margin_size", type = int, default = 1000,
                                    help = "this value should be at least 1000. but very large value will lead to slow computation (default: %(default)s)")


parse_improper_group = parse_parser.add_argument_group("parse_improper_condition",
                                                       "parameters used for parsing improperly aligned read pairs from bam files")

parse_improper_group.add_argument("--improper_abnormal_insert_size", type = int, default = 2000,
                                  help = "the size of abnormal insert size used for identifying improper read pairs (default: %(default)s)")

parse_improper_group.add_argument("--improper_min_mapping_qual", type = int, default = 30,
                                  help = "the minimum acceptable mapping qualitiy reads within improper read pairs (default: %(default)s)")

parse_improper_group.add_argument("--improper_max_clipping_size", type = int, default = 5,
                                  help = "the maximum acceptable clipping size of reads within improper read pairs(default: %(default)s) ")


cluster_improper_group = parse_parser.add_argument_group("cluster_improper_condition",
                                                         "parameters used for parsing improperly aligned read pairs")

cluster_improper_group.add_argument("--junction_dist_margin", type = int, default = 500,
                                    help = "possible junction position margin from the junction direction (default: %(default)s)")

cluster_improper_group.add_argument("--junction_opposite_dist_margin_margin", type = int, default = 30,
                                    help = "possible junction position in the opposite side (default: %(default)s)")

cluster_improper_group.add_argument("--improper_check_margin_size", type = int, default = 1500,
                                    help = "this should be sufficiently greater than insert size, but the computational time will increase when too large (default: %(default)s)")


parse_parser.set_defaults(func = genomonSV_parse)
####################   


####################
# GenomonSV filt
filt_parser = subparsers.add_parser("filt", 
                                     help = "Filter candidate structural variations")

filt_parser.add_argument("sampleInfoFile", metavar = "sample.yaml", type = str,
                          help = "input sample information file (yaml format)")

filt_parser.add_argument("paramInfoFile", metavar = "param.yaml", type = str,
                          help = "parameter information file (yaml format)")

filt_parser.set_defaults(func = genomonSV_filt)
####################


####################
# GenomonSV filt
filt_parser = subparsers.add_parser("merge",
                                     help = "Merge clustered junction files for filtering")

filt_parser.add_argument("controlPathInfoFile", metavar = "control.yaml", type = str,
                          help = "the pathes for clustered junction files")

filt_parser.add_argument("outputFilePath", metavar = "mergedControl.bedpe.gz", type = str,
                          help = "the pathes for merged control junction files")

filt_parser.add_argument("paramInfoFile", metavar = "param.yaml", type = str,
                          help = "parameter information file (yaml format)")
 
filt_parser.set_defaults(func = genomonSV_merge)
####################


args = parser.parse_args()

args.func(args)          
